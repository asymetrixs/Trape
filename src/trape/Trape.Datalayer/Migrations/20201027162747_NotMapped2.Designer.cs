// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using trape.datalayer;

namespace Trape.Datalayer.Migrations
{
    [DbContext(typeof(TrapeContext))]
    [Migration("20201027162747_NotMapped2")]
    partial class NotMapped2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("trape.datalayer.Models.AccountInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("BuyerCommission")
                        .HasColumnName("buyer_commission")
                        .HasColumnType("numeric");

                    b.Property<bool>("CanDeposit")
                        .HasColumnName("can_deposit")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanTrade")
                        .HasColumnName("can_trade")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanWithdraw")
                        .HasColumnName("can_withdraw")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MakerCommission")
                        .HasColumnName("maker_commission")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SellerCommission")
                        .HasColumnName("seller_commission")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TakerCommission")
                        .HasColumnName("taker_commission")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("updated_on")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("account_infos");
                });

            modelBuilder.Entity("trape.datalayer.Models.Balance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AccountInfoId")
                        .HasColumnName("account_info_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Asset")
                        .HasColumnName("asset")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Free")
                        .HasColumnName("free")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Locked")
                        .HasColumnName("locked")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnName("total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountInfoId");

                    b.HasIndex("Id");

                    b.ToTable("balances");
                });

            modelBuilder.Entity("trape.datalayer.Models.BalanceUpdate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Asset")
                        .HasColumnName("asset")
                        .HasColumnType("text");

                    b.Property<decimal>("BalanceDelta")
                        .HasColumnName("balance_delta")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("ClearTime")
                        .HasColumnName("clear_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("balance_updates");
                });

            modelBuilder.Entity("trape.datalayer.Models.BookPrice", b =>
                {
                    b.Property<long>("UpdateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("update_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("BestAskPrice")
                        .HasColumnName("best_ask_price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BestAskQuantity")
                        .HasColumnName("best_ask_quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BestBidPrice")
                        .HasColumnName("best_bid_price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BestBidQuantity")
                        .HasColumnName("best_bid_quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("text");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnName("transaction_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UpdateId");

                    b.HasIndex("UpdateId");

                    b.HasIndex("TransactionTime", "Symbol");

                    b.ToTable("book_ticks");
                });

            modelBuilder.Entity("trape.datalayer.Models.ClientOrder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("integer");

                    b.Property<int>("OrderResponseType")
                        .HasColumnName("order_response_type")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("Side")
                        .HasColumnName("side")
                        .HasColumnType("integer");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("text");

                    b.Property<int?>("TimeInForce")
                        .HasColumnName("time_in_force")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedOn");

                    b.HasIndex("Id");

                    b.HasIndex("Symbol");

                    b.ToTable("client_order");
                });

            modelBuilder.Entity("trape.datalayer.Models.Kline", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<decimal>("BaseVolume")
                        .HasColumnName("base_volume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Close")
                        .HasColumnName("close")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnName("close_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Final")
                        .HasColumnName("final")
                        .HasColumnType("boolean");

                    b.Property<long>("FirstTradeId")
                        .HasColumnName("first_trade_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("High")
                        .HasColumnName("high")
                        .HasColumnType("numeric");

                    b.Property<int>("Interval")
                        .HasColumnName("interval")
                        .HasColumnType("integer");

                    b.Property<long>("LastTradeId")
                        .HasColumnName("last_trade_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Low")
                        .HasColumnName("low")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Open")
                        .HasColumnName("open")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnName("open_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("QuoteVolume")
                        .HasColumnName("quote_volume")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("text");

                    b.Property<decimal>("TakerBuyBaseVolume")
                        .HasColumnName("taker_buy_base_volume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TakerBuyQuoteVolume")
                        .HasColumnName("taker_buy_quote_volume")
                        .HasColumnType("numeric");

                    b.Property<int>("TradeCount")
                        .HasColumnName("trade_count")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OpenTime", "Interval", "Symbol");

                    b.ToTable("klines");
                });

            modelBuilder.Entity("trape.datalayer.Models.LastDecision", b =>
                {
                    b.Property<int>("Action")
                        .HasColumnName("r_action")
                        .HasColumnType("int4");

                    b.Property<DateTime>("EventTime")
                        .HasColumnName("r_event_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Symbol")
                        .HasColumnName("r_symbol")
                        .HasColumnType("text");

                    b.ToTable("last_decisions","stubs");
                });

            modelBuilder.Entity("trape.datalayer.Models.LatestMA10mAndMA30mCrossing", b =>
                {
                    b.ToTable("latest_ma10m_and_ma30m_crossing","stubs");
                });

            modelBuilder.Entity("trape.datalayer.Models.LatestMA1hAndMA3hCrossing", b =>
                {
                    b.ToTable("latest_ma1h_and_ma3h_crossing","stubs");
                });

            modelBuilder.Entity("trape.datalayer.Models.LatestMA30mAndMA1hCrossing", b =>
                {
                    b.ToTable("latest_ma30m_and_ma1h_crossing","stubs");
                });

            modelBuilder.Entity("trape.datalayer.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClientOrderId")
                        .HasColumnName("client_order_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderListId")
                        .HasColumnName("order_list_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientOrderId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderListId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("trape.datalayer.Models.OrderList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ContingencyType")
                        .HasColumnName("contingency_type")
                        .HasColumnType("text");

                    b.Property<string>("ListClientOrderId")
                        .HasColumnName("list_client_order_id")
                        .HasColumnType("text");

                    b.Property<int>("ListOrderStatus")
                        .HasColumnName("list_order_status")
                        .HasColumnType("integer");

                    b.Property<int>("ListStatusType")
                        .HasColumnName("list_status_type")
                        .HasColumnType("integer");

                    b.Property<long>("OrderListId")
                        .HasColumnName("order_list_id")
                        .HasColumnType("bigint");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("text");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnName("transaction_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderListId");

                    b.HasIndex("Symbol");

                    b.ToTable("order_lists");
                });

            modelBuilder.Entity("trape.datalayer.Models.OrderTrade", b =>
                {
                    b.Property<long>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("trade_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Commission")
                        .HasColumnName("commission")
                        .HasColumnType("numeric");

                    b.Property<string>("CommissionAsset")
                        .HasColumnName("commission_asset")
                        .HasColumnType("text");

                    b.Property<decimal>("ConsumedQuantity")
                        .HasColumnName("consumed_quantity")
                        .HasColumnType("numeric");

                    b.Property<long>("PlacedOrderId")
                        .HasColumnName("placed_order_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric");

                    b.HasKey("TradeId");

                    b.HasIndex("PlacedOrderId");

                    b.HasIndex("TradeId");

                    b.ToTable("order_trades");
                });

            modelBuilder.Entity("trape.datalayer.Models.OrderUpdate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("BuyerIsMaker")
                        .HasColumnName("buyer_is_maker")
                        .HasColumnType("boolean");

                    b.Property<string>("ClientOrderId")
                        .HasColumnName("client_order_id")
                        .HasColumnType("text");

                    b.Property<decimal>("Commission")
                        .HasColumnName("commission")
                        .HasColumnType("numeric");

                    b.Property<string>("CommissionAsset")
                        .HasColumnName("commission_asset")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExecutionType")
                        .HasColumnName("execution_type")
                        .HasColumnType("integer");

                    b.Property<long>("I")
                        .HasColumnName("i")
                        .HasColumnType("bigint");

                    b.Property<decimal>("IcebergQuantity")
                        .HasColumnName("iceberg_quantity")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsWorking")
                        .HasColumnName("is_working")
                        .HasColumnType("boolean");

                    b.Property<decimal>("LastPriceFilled")
                        .HasColumnName("last_price_filled")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LastQuantityFilled")
                        .HasColumnName("last_quantity_filled")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LastQuoteQuantity")
                        .HasColumnName("last_quote_quantity")
                        .HasColumnType("numeric");

                    b.Property<long>("OrderId")
                        .HasColumnName("order_id")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderListId")
                        .HasColumnName("order_list_id")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalClientOrderId")
                        .HasColumnName("original_client_order_id")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuantityFilled")
                        .HasColumnName("quantity_filled")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuoteOrderQuantity")
                        .HasColumnName("quote_order_quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuoteQuantity")
                        .HasColumnName("quote_quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuoteQuantityFilled")
                        .HasColumnName("quote_quantity_filled")
                        .HasColumnType("numeric");

                    b.Property<int>("RejectReason")
                        .HasColumnName("reject_reason")
                        .HasColumnType("integer");

                    b.Property<int>("Side")
                        .HasColumnName("side")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<decimal>("StopPrice")
                        .HasColumnName("stop_price")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("text");

                    b.Property<int>("TimeInForce")
                        .HasColumnName("time_in_force")
                        .HasColumnType("integer");

                    b.Property<long>("TradeId")
                        .HasColumnName("trade_id")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("update_time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientOrderId");

                    b.HasIndex("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderListId");

                    b.HasIndex("OriginalClientOrderId");

                    b.HasIndex("Symbol", "Side");

                    b.ToTable("order_updates");
                });

            modelBuilder.Entity("trape.datalayer.Models.PlacedOrder", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClientOrderId")
                        .HasColumnName("client_order_id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("create_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("MarginBuyBorrowAmount")
                        .HasColumnName("margin_buy_borrow_amount")
                        .HasColumnType("numeric");

                    b.Property<string>("MarginBuyBorrowAsset")
                        .HasColumnName("margin_buy_borrow_asset")
                        .HasColumnType("text");

                    b.Property<long?>("OrderListId")
                        .HasColumnName("order_list_id")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalClientOrderId")
                        .HasColumnName("original_client_order_id")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnName("quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuantityFilled")
                        .HasColumnName("quantity_filled")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuoteQuantity")
                        .HasColumnName("quote_quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuoteQuantityFilled")
                        .HasColumnName("quote_quantity_filled")
                        .HasColumnType("numeric");

                    b.Property<int>("Side")
                        .HasColumnName("side")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("StopPrice")
                        .HasColumnName("stop_price")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("text");

                    b.Property<int>("TimeInForce")
                        .HasColumnName("time_in_force")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnName("transaction_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientOrderId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderListId");

                    b.HasIndex("OriginalClientOrderId");

                    b.HasIndex("TransactionTime", "Symbol");

                    b.ToTable("placed_orders");
                });

            modelBuilder.Entity("trape.datalayer.Models.Recommendation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<int>("Action")
                        .HasColumnName("action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("created_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("MovingAverage10m")
                        .HasColumnName("moving_average10m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage10s")
                        .HasColumnName("moving_average10s")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage12h")
                        .HasColumnName("moving_average12h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage15m")
                        .HasColumnName("moving_average15m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage15s")
                        .HasColumnName("moving_average15s")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage18h")
                        .HasColumnName("moving_average18h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage1d")
                        .HasColumnName("moving_average1d")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage1h")
                        .HasColumnName("moving_average1h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage1m")
                        .HasColumnName("moving_average1m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage2h")
                        .HasColumnName("moving_average2h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage2m")
                        .HasColumnName("moving_average2m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage30m")
                        .HasColumnName("moving_average30m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage30s")
                        .HasColumnName("moving_average30s")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage3h")
                        .HasColumnName("moving_average3h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage3m")
                        .HasColumnName("moving_average3m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage45s")
                        .HasColumnName("moving_average45s")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage5m")
                        .HasColumnName("moving_average5m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage5s")
                        .HasColumnName("moving_average5s")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage6h")
                        .HasColumnName("moving_average6h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MovingAverage7m")
                        .HasColumnName("moving_average7m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope10m")
                        .HasColumnName("slope10m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope10s")
                        .HasColumnName("slope10s")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope12h")
                        .HasColumnName("slope12h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope15m")
                        .HasColumnName("slope15m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope15s")
                        .HasColumnName("slope15s")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope18h")
                        .HasColumnName("slope18h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope1d")
                        .HasColumnName("slope1d")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope1h")
                        .HasColumnName("slope1h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope1m")
                        .HasColumnName("slope1m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope2h")
                        .HasColumnName("slope2h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope2m")
                        .HasColumnName("slope2m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope30m")
                        .HasColumnName("slope30m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope30s")
                        .HasColumnName("slope30s")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope3h")
                        .HasColumnName("slope3h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope3m")
                        .HasColumnName("slope3m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope45s")
                        .HasColumnName("slope45s")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope5m")
                        .HasColumnName("slope5m")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope5s")
                        .HasColumnName("slope5s")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope6h")
                        .HasColumnName("slope6h")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Slope7m")
                        .HasColumnName("slope7m")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("recommendations");
                });

            modelBuilder.Entity("trape.datalayer.Models.Symbol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsCollectionActive")
                        .HasColumnName("is_collection_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTradingActive")
                        .HasColumnName("is_trading_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("symbols");
                });

            modelBuilder.Entity("trape.datalayer.Models.Tick", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("text");

                    b.Property<decimal>("AskPrice")
                        .HasColumnName("ask_price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AskQuantity")
                        .HasColumnName("ask_quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BaseVolume")
                        .HasColumnName("base_volume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BidPrice")
                        .HasColumnName("bid_price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BidQuantity")
                        .HasColumnName("bid_quantity")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnName("close_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("FirstTradeId")
                        .HasColumnName("first_trade_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("HighPrice")
                        .HasColumnName("high_price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LastPrice")
                        .HasColumnName("last_price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LastQuantity")
                        .HasColumnName("last_quantity")
                        .HasColumnType("numeric");

                    b.Property<long>("LastTradeId")
                        .HasColumnName("last_trade_id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("LowPrice")
                        .HasColumnName("low_price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OpenPrice")
                        .HasColumnName("open_price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnName("open_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("PrevDayClosePrice")
                        .HasColumnName("prev_day_close_price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceChange")
                        .HasColumnName("price_change")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceChangePercent")
                        .HasColumnName("price_change_percent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuoteVolume")
                        .HasColumnName("quote_volume")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .HasColumnName("symbol")
                        .HasColumnType("text");

                    b.Property<long>("TotalTrades")
                        .HasColumnName("total_trades")
                        .HasColumnType("bigint");

                    b.Property<decimal>("WeightedAveragePrice")
                        .HasColumnName("weighted_average_price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("OpenTime", "CloseTime");

                    b.ToTable("ticks");
                });

            modelBuilder.Entity("trape.datalayer.Models.Balance", b =>
                {
                    b.HasOne("trape.datalayer.Models.AccountInfo", "AccountInfo")
                        .WithMany("Balances")
                        .HasForeignKey("AccountInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("trape.datalayer.Models.Order", b =>
                {
                    b.HasOne("trape.datalayer.Models.ClientOrder", "ClientOrder")
                        .WithOne("Order")
                        .HasForeignKey("trape.datalayer.Models.Order", "ClientOrderId");

                    b.HasOne("trape.datalayer.Models.OrderList", "OrderList")
                        .WithMany("Orders")
                        .HasForeignKey("OrderListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("trape.datalayer.Models.OrderTrade", b =>
                {
                    b.HasOne("trape.datalayer.Models.PlacedOrder", "PlacedOrder")
                        .WithMany("Fills")
                        .HasForeignKey("PlacedOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("trape.datalayer.Models.OrderUpdate", b =>
                {
                    b.HasOne("trape.datalayer.Models.Order", "Order")
                        .WithMany("OrderUpdates")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("trape.datalayer.Models.OrderList", "OrderList")
                        .WithMany("OrderUpdates")
                        .HasForeignKey("OrderListId");
                });
#pragma warning restore 612, 618
        }
    }
}
